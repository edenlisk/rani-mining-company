const multer = require('multer');
const PdfPrinter = require('pdfmake');
const path = require('path');
const mongoose = require('mongoose');
const Shipment = require("../models/shipmentModel");
const Settings = require('../models/settingsModel');
const Supplier = require('../models/supplierModel');
const catchAsync = require('../utils/catchAsync');
const AppError = require('../utils/appError');
const {getModel, fonts, getModelAcronym, getSFDT, replaceSpecialCharacters} = require('../utils/helperFunctions');
const fs = require('fs');
const imagekit = require('../utils/imagekit');
const ExcelJS = require('exceljs');
const {decidePricingGrade} = require("../utils/helperFunctions");
const {v4: uuidv4} = require('uuid');
const { generateForwardNote } = require('../utils/docTemplater');
// const { multerFilter, multerStorage } = require('../utils/helperFunctions');


exports.getAllshipments = catchAsync(async (req, res, next) => {
    const shipments = await Shipment.find().sort("-createdAt");
    const newShipments = [];
    if (shipments) {
        for (const shipment of shipments) {
            const tempShipment = {
                ...shipment._doc,
                averageGrade: parseFloat(await shipment.averageGrade),
                averagePrice: parseFloat(await shipment.averagePrice),
                netWeight: parseFloat(shipment.netWeight),
                averageNiobium: parseFloat(await shipment.averageNiobium)
            }
            newShipments.push(tempShipment);
        }
    }
    res
        .status(200)
        .json(
            {
                status: "Success",
                data: {
                    shipments: newShipments
                }
            }
        )
    ;
})

exports.createShipment = catchAsync(async (req, res, next) => {
    await Shipment.create(
        {
            entries: req.body.entries,
            shipmentPrice: req.body.shipmentPrice,
            shipmentGrade: req.body.shipmentGrade,
            shipmentNumber: replaceSpecialCharacters(req.body.shipmentNumber),
            netWeight: req.body.netWeight,
            buyerId: req.body.buyerId,
            shipmentSamplingDate: req.body.shipmentSamplingDate,
            shipmentContainerLoadingDate: req.body.shipmentContainerLoadingDate,
            averageGrade: req.body.averageGrade,
            averagePrice: req.body.averagePrice,
            model: req.body.model
        }
    )
    res
        .status(201)
        .json(
            {
                status: "Success"
            }
        )
    ;
})

exports.downloadCertificate = catchAsync(async (req, res, next) => {

})

exports.getOneShipment = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError("The selected shipment no longer exists", 400));
    const newShipment = {
        ...shipment._doc,
        averageGrade: parseFloat(await shipment.averageGrade),
        averagePrice: parseFloat(await shipment.averagePrice),
        netWeight: parseFloat(shipment.netWeight),
        averageNiobium: parseFloat(await shipment.averageNiobium)
    }
    const Entry = getModel(shipment.model);
    const shipmentLots = [];
    for (const item of shipment.entries) {
        const entry = await Entry.findById(item.entryId);
        if (!entry) continue;
        const lot = entry.output?.find(lt => parseInt(lt.lotNumber) === parseInt(item.lotNumber));
        if (!lot) continue;
        const lotInfo = {
            entryId: entry._id,
            supplyDate: entry.supplyDate,
            companyName: entry.companyName,
            beneficiary: entry.beneficiary,
            mineralType: getModelAcronym(entry.mineralType),
            weightIn: entry.weightIn,
            weightOut: lot.weightOut,
            lotNumber: lot.lotNumber,
            exportedAmount: lot.exportedAmount,
            balance: lot.cumulativeAmount,
            mineralGrade: lot.pricingGrade ? lot[decidePricingGrade(lot.pricingGrade)] : lot.ASIR || lot.mineralGrade,
            mineralPrice: lot.mineralPrice,
            [shipment.shipmentNumber]: item.quantity,
            index: uuidv4(),
        }
        if (shipment.model === "coltan") {
            lotInfo.niobium = lot.niobium;
            lotInfo.iron = lot.iron;
        } else if (shipment.model === "wolframite") {
            lotInfo.metricTonUnit = lot.metricTonUnit;
        }
        shipmentLots.push(lotInfo);
    }
    res
        .status(200)
        .json(
            {
                status: "Success",
                data: {
                    shipment: newShipment,
                    shipmentLots
                }
            }
        )
    ;
})

exports.updateShipment = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError("Selected shipment no longer exists!", 400));
    if (req.files) {
        for (const file of req.files) {
            fs.readFile(file.path, (err, data) => {
                imagekit.upload(
                    {
                        file: data,
                        fileName: file.originalname,
                        folder: `/shipments/${req.params.shipmentNumber}`
                    }, (err1, result) => {
                        if (err1) {
                            console.log(err1);
                        } else {
                            shipment[file.fieldname] = result.url;
                        }
                    }
                )
                fs.unlink(file.path, err1 => {
                    if (err1) {
                        console.log(err1);
                    }
                })
            })
        }
    }
    if (req.body.entries) {
        const Entry = getModel(shipment.model);
        for (const item of req.body.entries) {
            const entry = await Entry.findById(item.entryId);
            if (!entry) continue;
            const lot = entry.output?.find(value => parseInt(value.lotNumber) === parseInt(item.lotNumber));
            if (!lot || !entry) return next(new AppError("Something went wrong, lot is missing", 400));
            const lotShipment = lot.shipmentHistory?.find(value => value.shipmentNumber === shipment.shipmentNumber);
            if (lotShipment) {
                if (parseInt(item[shipment.shipmentNumber]) === 0) {
                    lot.shipmentHistory = lot.shipmentHistory.filter(value => value.shipmentNumber !== shipment.shipmentNumber);
                    shipment.entries = shipment.entries.filter(value => (value.entryId !== new mongoose.Types.ObjectId(item.entryId)) && (parseInt(value.lotNumber) !== parseInt(item.lotNumber)));
                } else {
                    const shipmentEntry = shipment.entries.find(value => (value.entryId.equals(item.entryId)) && (parseInt(value.lotNumber) === parseInt(item.lotNumber)));
                    if (!shipmentEntry) continue;
                    shipmentEntry.quantity = item[shipment.shipmentNumber];
                    // shipment.entries.map(value => {
                    //     if ((value.entryId.equals(item.entryId)) && (parseInt(value.lotNumber) === parseInt(item.lotNumber))) {
                    //         value.quantity = item[shipment.shipmentNumber];
                    //     }
                    // })
                    // shipmentEntry.quantity = item[shipment.shipmentNumber];
                    lotShipment.weight = item[shipment.shipmentNumber];
                }
            } else {
                if (parseInt(item[shipment.shipmentNumber]) === 0) continue;
                lot.shipmentHistory.push({shipmentNumber: shipment.shipmentNumber, weight: item[shipment.shipmentNumber], date: new Date()});
                shipment.entries.push({entryId: item.entryId, lotNumber: parseInt(item.lotNumber), quantity: item[shipment.shipmentNumber]});
            }
            await entry.save({validateModifiedOnly: true});
        }
    }
    if (req.body.buyerId) shipment.buyerId = req.body.buyerId;
    if (req.body.shipmentGrade) shipment.shipmentGrade = req.body.shipmentGrade;
    if (req.body.shipmentPrice) shipment.shipmentPrice = req.body.shipmentPrice;
    if (req.body.shipmentNumber) shipment.shipmentNumber = req.body.shipmentNumber;
    if (req.body.shipmentSamplingDate) shipment.shipmentSamplingDate = req.body.shipmentSamplingDate;
    if (req.body.shipmentContainerLoadingDate) shipment.shipmentContainerLoadingDate = req.body.shipmentContainerLoadingDate;
    if (req.body.netWeight) shipment.netWeight = req.body.netWeight;
    if (req.body.averageGrade) shipment.averageGrade = req.body.averageGrade;
    if (req.body.averagePrice) shipment.averagePrice = req.body.averagePrice;
    if (req.body.iTSCiShipmentNumber) shipment.iTSCiShipmentNumber = req.body.iTSCiShipmentNumber;
    if (req.body.dustWeight) shipment.dustWeight = req.body.dustWeight;
    if (req.body.sampleWeight) shipment.sampleWeight = req.body.sampleWeight;
    if (req.body.shipmentDate) shipment.shipmentDate = req.body.shipmentDate;
    await shipment.save({validateModifiedOnly: true});
    res
        .status(202)
        .json(
            {
                status: "Success"
            }
        )
    ;
})

exports.deleteShipment = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findByIdAndDelete(req.params.shipmentId);
    if (!shipment) return next(new AppError("Selected shipment no longer exists!", 400));
    res
        .status(204)
        .json(
            {
                status: "Success"
            }
        )
    ;
})

exports.shipmentReport = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError("Something went wrong, shipment is missing!", 400));
    const Entry = getModel(shipment.model);
    // const entryIds = shipment.entries.map(entry => entry.entryId);
    // const entries = await Entry.find({_id: {$in: entryIds}});
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(`${shipment.shipmentNumber}`);
    worksheet.columns = [
        { header: 'DATE', key: 'supplyDate', width: 15, style: {alignment: "left"} },
        { header: 'COMPANY\n/COOPERATIVE NAME', key: 'companyName', width: 15, style: {alignment: "left"} },
        { header: 'REPRESENTATIVE NAME', key: 'beneficiary', width: 15, style: {alignment: "left"} },
        { header: 'NET QUANTITY (KG)', key: "exportWeight", width: 15, style: {alignment: "left"} },
        { header: 'TYPE OF MINERAL', key: "mineralType", width: 15, style: {alignment: "left"} },
        { header: 'LOT NUMBER', key: "lotNumber", width: 15, style: {alignment: "left"} },
        { header: 'ASIR LABO GRADE (%)', key: "mineralGrade", width: 15, style: {alignment: "left"} },
        { header: 'PRICE/KG ($USD)', key: "pricePerUnit", width: 15, style: {alignment: "left"} },
        { header: 'TOTAL PRICE', key: "mineralPrice", width: 15, style: {alignment: "left"} },
        { header: 'WEIGHT * GRADE', key: "weightGrade", width: 15, style: {alignment: "left"} },
    ];
    // TODO 22: USE DIFFERENT TABLE INFO FOR EACH MODEL (COLTAN, CASSITERITE(DONE), WOLFRAMITE)
    if (shipment.entries) {
        let totalExportWeight = 0;
        let totalPrice = 0;
        let totalWeightGrade = 0;
        for (const item of shipment.entries) {
            const entry = await Entry.findById(item.entryId);
            if (!entry) continue;
            const lot = entry.output.find(value => parseInt(value.lotNumber) === parseInt(item.lotNumber));
            let exportWeight = 0;
            const lotShipment = lot.shipmentHistory.find(value => value.shipmentNumber === shipment.shipmentNumber);
            if (lotShipment) exportWeight = lotShipment.weight;
            totalExportWeight += exportWeight;
            totalPrice += lot.mineralPrice;
            totalWeightGrade += (lot.weightOut * lot[decidePricingGrade(lot.pricingGrade)] || lot.ASIR || lot.mineralGrade || 0);
            worksheet.addRow({
                supplyDate: entry.supplyDate?.toISOString().split('T')[0],
                companyName: entry.companyName,
                beneficiary: entry.beneficiary,
                exportWeight,
                mineralType: getModelAcronym(shipment.model),
                lotNumber: item.lotNumber,
                mineralGrade: lot[decidePricingGrade(lot.pricingGrade)] || lot.ASIR || lot.mineralGrade || 0,
                pricePerUnit: lot.pricePerUnit,
                mineralPrice: lot.mineralPrice,
                weightGrade: lot.weightOut * lot[decidePricingGrade(lot.pricingGrade)] || lot.ASIR || lot.mineralGrade || 0,
            })
        }
        const averagePrice = totalPrice / totalExportWeight;
        const averageGradeSN = totalWeightGrade / totalExportWeight;

        worksheet.addRow({
            companyName: "TOTAL",
            exportWeight: totalExportWeight,
            mineralPrice: totalPrice,
            weightGrade: totalWeightGrade,
        });
        worksheet.addRow({
            companyName: "AVERAGE PRICE",
            pricePerUnit: averagePrice,
        });
        worksheet.addRow({
            companyName: "AVERAGE GRADE",
            mineralGrade: averageGradeSN,
        });
    }
    worksheet.getRow(1).font = {bold: true};
    const buffer = await workbook.xlsx.writeBuffer();
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.end(Buffer.from(buffer));
    // const buffer = await workbook.xlsx.writeFile(`${__dirname}/../public/data/shipment/shipment.xlsx`);
})

exports.shipmentReportPdf = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError("Something went wrong, shipment is missing!", 400));
    const Entry = getModel(shipment.model);
    // const entryIds = shipment.entries.map(entry => entry.entryId);
    // const entries = await Entry.find({_id: {$in: entryIds}});
    const tableData = [
        [
            {text: "Supply date", margin: [0, 5, 0, 2], fillColor: '#93c6e8'},
            {text: 'Supplier name', margin: [0, 5, 0, 2], fillColor: '#93c6e8'},
            {text: "Lot No", margin: [0, 5, 0, 2], fillColor: '#93c6e8'},
            {text: 'Weight out', margin: [0, 5, 0, 2], fillColor: '#93c6e8'},
            {text: `To Be Exported`, margin: [0, 5, 0, 2], fillColor: '#93c6e8'},
            // {text: "Balance", margin: [0, 5, 0, 2], fillColor: '#93c6e8'},
            // {text: "Grade", margin: [0, 5, 0, 2], fillColor: '#93c6e8'},
        ]
    ];

    const populateDoc = async (tableData) => {
        for (const item of shipment.entries) {
            // const Entry = getModel(shipment.model);
            const entry = await Entry.findById(item.entryId);
            if (!entry) continue;
            const lot = entry.output?.find(value => parseInt(value.lotNumber) === parseInt(item.lotNumber));
            if (!lot) continue;
            const lotShipment = lot.shipmentHistory.find(value => value.shipmentNumber === shipment.shipmentNumber);
            if (!lotShipment) continue;
            tableData.push([
                {text: entry.supplyDate.toISOString().split('T')[0]},
                {text: entry.companyName},
                {text: item.lotNumber},
                {text: lot.weightOut},
                {text: lotShipment.weight},
            ])
        }
        return tableData;
    }

    const docDefinition = {
        pageOrientation: 'landscape',
        pageMargins: [40, 50, 40, 50],
        content: [
            {
                text: `Shipment details for shipment number: ${shipment.shipmentNumber}`,
                alignment: 'left',
                margin: [30, 20, 30, 20],
                fontSize: 25
            },
            {
                table: {
                    width: ['*', '*', '*', '*', "auto"],
                    body: await populateDoc(tableData),
                },
                alignment: 'center',
            }
        ],
        defaultStyle: {
            font: 'Helvetica',
            fontSize: 20
        }
    };
    const printer = new PdfPrinter(fonts);

    // SAVE THE DOCUMENT ON THE FILE SYSTEM
    const pdfDoc = printer.createPdfKitDocument(docDefinition);
    // pdfDoc.pipe(fs.createWriteStream('document.pdf'));
    // pdfDoc.end();
    // 1. create structure of the report
    // 2. populate data into report
    // 3. send report back to client
    res.setHeader('Content-Type', 'application/pdf');
    pdfDoc.pipe(res);
    pdfDoc.end();
})

exports.shipmentQuarterReport = catchAsync(async (req, res, next) => {
    // const shipments = await Shipment.aggregate(
    //     [
    //         {
    //             $match: {
    //                 model: req.body.model,
    //                 createdAt: {
    //                     $gte: new Date(req.body.startDate),
    //                     $lte: new Date(req.body.endDate)
    //                 }
    //             }
    //         },
    //         {
    //             $unwind: "$entries"
    //         },
    //         {
    //             $group: {
    //                 _id: "$entries.entryId",
    //                 balance: { $sum: "$entries.quantity" }
    //             }
    //         }
    //     ]
    // )

    const shipmentRawData = await Shipment.find(
        {
            model: req.body.model,
            createdAt: {
                $gte: new Date(req.body.startDate),
                $lte: new Date(req.body.endDate)
            }
        })

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(`${shipment.shipmentNumber}`);
    worksheet.columns = [
        { header: 'DATE', key: 'supplyDate', width: 15, style: {alignment: "left"} },
        { header: 'COMPANY\n/COOPERATIVE NAME', key: 'companyName', width: 15, style: {alignment: "left"} },
        { header: 'Weight In (KG)', key: "weightIn", width: 15, style: {alignment: "left"} },
        { header: 'Weight Out (KG)', key: "weightOut", width: 15, style: {alignment: "left"} },
        { header: 'LOT NUMBER', key: "lotNumber", width: 15, style: {alignment: "left"} },
        { header: 'ASI LABO GRADE (%)', key: "mineralGrade", width: 15, style: {alignment: "left"} },
        { header: 'PRICE/KG ($USD)', key: "pricePerUnit", width: 15, style: {alignment: "left"} },
        { header: 'TOTAL PRICE', key: "mineralPrice", width: 15, style: {alignment: "left"} },
        { header: 'WEIGHT * GRADE', key: "weightGrade", width: 15, style: {alignment: "left"} },
    ];

    const reportRawData = [];


    const Entry = getModel(req.body.model);
    for (const shipmentRawDatum of shipmentRawData) {
        if (shipmentRawDatum.entries) {
            const grouped = shipmentRawDatum.entries.reduce((result, item) => {
                const {entryId, quantity, _id, lotNumber} = item;
                if (!result[entryId]) {
                    result[entryId] = {
                        entryId,
                        quantitySum: 0,
                        items: [],
                    };
                }
                result[entryId].quantitySum += item.quantity;
                result[entryId].items.push({entryId, quantity, _id, lotNumber});
                return result;
            }, {});
            const singleShipment = [];
            for (const key of Object.keys(grouped)) {
                const items = grouped[key];
                const entry = await Entry.findById(key);
                if (entry) {
                    singleShipment.push(
                        {
                            supplyDate: entry.supplyDate.toISOString().split('T')[0],
                            companyName: entry.companyName,
                            weightIn: entry.weightIn,
                            quantity: items.quantitySum,
                            // TODO 22: USE CORRECT CONCENTRATION, PRICE, TOTAL AMOUNT VALUES
                            price: '',
                            concentration: '',
                            totalAmount: ''
                        }
                    )
                }
            }
            reportRawData.push(singleShipment);
        }
    }

    const tableHeading = [
        {text: "DATE", margin: [0, 5, 0, 2], fontSize: 15},
        {text: 'COMPANY NAMES', margin: [0, 5, 0, 2], fontSize: 15},
        {text: "WEIGHT IN", margin: [0, 5, 0, 2], fontSize: 15},
        {text: 'QUANTITY (KG)', margin: [0, 5, 0, 2], fontSize: 15},
        {text: "PRICE", margin: [0, 5, 0, 2], fontSize: 15},
        {text: "CONC.(%)", margin: [0, 5, 0, 2], fontSize: 15},
        {text: "TOTAL AMOUNT (USD)", margin: [0, 5, 0, 2], fontSize: 15},
    ];

    const docDefinition = {
        pageOrientation: "landscape",
        pageMargins: [40, 50, 40, 50],
        content: [
            {
                text: `OBJECT: DETAILED REPORT OF THE - TERM MINERAL SALES, WEIGHT, GRADE, PRICE AND SUPPLIERS`,
                alignment: 'center',
                margin: [30, 20, 30, 20],
                fontSize: 25
            },
        ],
        defaultStyle: {
            font: 'Helvetica',
            fontSize: 20
        }
    }

    const populateDoc = () => {
        const tableHead = [tableHeading];
        for (const shipmentTable of reportRawData) {
            for (const row of shipmentTable) {
                const singleRow = [
                    {text: row.supplyDate},
                    {text: row.companyName},
                    {text: parseInt(row.weightIn)},
                    {text: parseInt(row.quantity)},
                    {text: parseFloat(row.price)},
                    {text: parseFloat(row.concentration)},
                    {text: row.totalAmount},
                ]
                tableHead.push(singleRow);
            }
            docDefinition.content.push(
                {
                    table: {
                        width: ['*', '*', '*', '*', "*", '*', "auto"],
                        body: tableHead,
                    },
                    alignment: 'center',
                },
            )
        }
    }
    populateDoc();

    const printer = new PdfPrinter(fonts);
    // SAVE THE DOCUMENT ON THE FILE SYSTEM
    const pdfDoc = printer.createPdfKitDocument(docDefinition);
    // 1. create structure of the report
    // 2. populate data into report
    // 3. send report back to client
    // console.log('weeeeeeeeeeeeeeeeeeee')
    res.setHeader('Content-Type', 'application/pdf');
    pdfDoc.pipe(res);
    pdfDoc.end();
})

exports.tagList = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError('Unable to get shipment', 400));
    const Entry = getModel(shipment.model);
    const entryIds = shipment.entries.map(entry => entry.entryId);
    const entries = await Entry.find({_id: {$in: entryIds}}).populate('mineTags negociantTags');
    res
        .status(200)
        .json(
            {
                status: "success",
                data: {
                    entries
                }
            }
        )
    ;
})

exports.generateTagList = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError('Unable to get shipment', 400));
    const Entry = getModel(shipment.model);
    const entryIds = shipment.entries.map(entry => entry.entryId);
    const entries = await Entry.find({_id: {$in: entryIds}}).populate('mineTags negociantTags');

    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(`${__dirname}/../public/data/templates/mine-tag-list.xlsx`);
    const worksheet = workbook.getWorksheet('MINE TAGS');

    const fileHeading = {
        4: `MATERIAL: ${shipment.shipmentMinerals?.toUpperCase()}`,
        5: `BUYER: ${shipment.buyerName?.toUpperCase() || ""}`,
        6: `LOT NUMBER: ${shipment.shipmentNumber}`,
        7: `ITA/iTSCi SHIPMENT NUMBER: ${shipment.iTSCiShipmentNumber}`,
        8: `EXPORT DATE: ${shipment.shipmentDate || ''}`
    }

    for (const [key, value] of Object.entries(fileHeading)) {
        worksheet.getRow(parseInt(key)).getCell(2).value = value;
    }

    const columnMapping = {
        index: 1,
        origin: 2,
        mineLocation: 3,
        weightOut: 4,
        exportWeight: 5,
        numberOfMineTags: 6,
        firstTaglist: 7,
        secondTaglist: 8,
        thirdTaglist: 9,
        forthTaglist: 10,
        numberOfNegTags: 11,
        negTAgNumber: 12
    }

    let totalMineTags = 0;
    let totalWeightIn = 0;
    let totalExportWeight = 0;
    let currentRow = 11;
    let index = 0;
    for (const entry of entries) {
        let mineTags;
        let negociantTags;
        if (entry.mineTags) {
            mineTags = entry.mineTags.filter(tag => tag.status === "out of store")
                .map(tag => tag.tagNumber).join('\n');
            totalMineTags += mineTags.split('\n').length;
        }
        if (entry.negociantTags) {
            negociantTags = entry.negociantTags.filter(tag => tag.status === "out of store")
                .map(tag => tag.tagNumber).join('\n');
        }
        totalWeightIn += entry.weightIn;
        const exportWeight = entry.output?.reduce((acc, lot) => {
            const lotShipment = lot.shipmentHistory.find(ship => ship.shipmentNumber === shipment.shipmentNumber);
            if (lotShipment) {
                return acc + lotShipment.weight;
            }
        }, 0);
        totalExportWeight += exportWeight;

        const newRow = worksheet.getRow(currentRow + index);
        newRow.getCell(columnMapping.index).value = index + 1;
        newRow.getCell(columnMapping.origin).value = entry.companyName;
        newRow.getCell(columnMapping.mineLocation).value = entry.mineLocation;
        newRow.getCell(columnMapping.weightOut).value = entry.weightOut;
        newRow.getCell(columnMapping.exportWeight).value = exportWeight;
        newRow.getCell(columnMapping.numberOfMineTags).value = mineTags ? mineTags.split('\n').length : 0;
        newRow.getCell(columnMapping.firstTaglist).value = mineTags ? mineTags : null;
        newRow.getCell(columnMapping.numberOfNegTags).value = negociantTags ? negociantTags.split('\n').length : 0;
        newRow.getCell(columnMapping.negTAgNumber).value = null;
    }
    currentRow += entries.length;
    worksheet.getRow(currentRow).getCell(columnMapping.origin).value = "TOTAL";
    worksheet.getRow(currentRow).getCell(columnMapping.weightOut).value = totalWeightIn;
    worksheet.getRow(currentRow).getCell(columnMapping.exportWeight).value = totalExportWeight;
    worksheet.getRow(currentRow).getCell(columnMapping.numberOfMineTags).value = totalMineTags;
    worksheet.getRow(entries.length + 2).font = {bold: true};
    worksheet.getRow(entries.length + 4).getCell(2).value = `AFTER PROCESSING AND SAMPLING THE NET WEIGHT IS ${shipment.netWeight} KGS`
    worksheet.getRow(entries.length + 5).getCell(2).value = `SAMPLE ${shipment.sampleWeight} KGS`;
    worksheet.getRow(entries.length + 6).getCell(2).value = `DUST ${shipment.dustWeight} KGS`;
    const buffer = await workbook.xlsx.writeBuffer();
    // await workbook.xlsx.writeFile(`MINE TAGS LIST.xlsx`);
    if (shipment.tagListFile?.fileId) {
        imagekit.deleteFile(shipment.tagListFile?.fileId, (err) => {
            if (err) {
                console.log(err);
            } else {
                console.log('file deleted');
            }
        })
        shipment.tagListFile.fileId = "";
        shipment.tagListFile.url = "";
    }
    let fileId = ""
    let url = ""
    // const data = fs.readFileSync(`MINE TAGS LIST.xlsx`);
    if (buffer) {
        const response = await imagekit.upload(
            {
                file: Buffer.from(buffer),
                fileName: `${shipment.shipmentNumber} MINE TAGS LIST.xlsx`,
                folder: `/shipments/${shipment.shipmentNumber}`,
                overwriteFile: true,
            }
        )
        if (response) {
            fileId = response.url;
            url = response.fileId;
            // fs.unlink(`${shipment.shipmentNumber} MINE TAGS LIST.xlsx`, (err) => {
            //     if (err) {
            //         console.log(err);
            //     } else {
            //         console.log('file deleted successfully');
            //     }
            // })
        }
    }
    shipment.tagListFile.url = fileId;
    shipment.tagListFile.fileId = url;
    await shipment.save({validateModifiedOnly: true});
    res
        .status(200)
        .json(
            {
                status: "success",
                data: {
                    tagListFile: shipment.tagListFile?.url
                }
            }
        )
    ;
})

exports.generateNegociantTagList = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError('Unable to get shipment', 400));
    const Entry = getModel(shipment.model);
    const entryIds = shipment.entries.map(entry => entry.entryId);
    const entries = await Entry.find({_id: {$in: entryIds}}).populate('negociantTags');
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(`${__dirname}/../public/data/templates/negociant-tag-list.xlsx`);
    const worksheet = workbook.getWorksheet('NEGOCIANT TAGS');

    const fileHeading = {
        2: `MATERIAL: ${shipment.shipmentMinerals?.toUpperCase()}`,
        3: `BUYER: ${shipment.buyerName?.toUpperCase() || ''}`,
        4: `LOT NUMBER: ${shipment.shipmentNumber}`,
        5: `ITA/iTSCi SHIPMENT NUMBER: ${shipment.iTSCiShipmentNumber}`,
        6: `DATE: ${shipment.shipmentDate || ''}`,
    }
    for (const [key, value] of Object.entries(fileHeading)) {
        worksheet.getRow(Number(key)).getCell(1).value = value;
    }
    const columnMapping = {
        index: 1,
        date: 2,
        companyName: 3,
        weightIn: 4,
        quantity: 5,
        negociantTagNumber: 6,
        price: 7,
        mineralGrade: 8
    }
    let totalTagWeight;
    let currentRow = 8;
    let index = 1;
    const totalWeightIn = entries.reduce((acc, entry) => acc + entry.weightIn, 0);
    for (const entry of entries) {
        if (!entry.negociantTags) continue;
        const negociantTags = entry.negociantTags.filter(tag => tag.status === 'out of store');
        if (negociantTags.length === 0) continue;
        totalTagWeight = negociantTags.reduce((acc, tag) => acc + tag.weight, 0);
        const totalWeightOutMineralGrade = entry.output.reduce((acc, output) => acc + (output.weightOut * output.mineralGrade), 0);
        const totalWeightOut = entry.output.reduce((acc, output) => acc + output.weightOut, 0);
        for (const tag of negociantTags) {
            const newRow = worksheet.getRow(currentRow);
            newRow.getCell(columnMapping.index).value = index;
            newRow.getCell(columnMapping.date).value = entry.supplyDate;
            newRow.getCell(columnMapping.companyName).value = entry.companyName;
            newRow.getCell(columnMapping.weightIn).value = entry.weightIn;
            newRow.getCell(columnMapping.quantity).value = tag.weight;
            newRow.getCell(columnMapping.negociantTagNumber).value = tag.tagNumber;
            newRow.getCell(columnMapping.price).value = entry.output[0].pricePerUnit;
            newRow.getCell(columnMapping.mineralGrade).value = totalWeightOutMineralGrade / totalWeightOut;
            // newRow.eachCell({includeEmpty: true}, function (cell, colNumber) {
            //     if (colNumber <= 8) {
            //         cell.font = { name: 'Arial', size: 10, family: 2, bold: true };
            //         cell.alignment = { vertical: 'middle', horizontal: 'center' };
            //         cell.border = {
            //             bottom: { style: 'thin' },
            //             left: { style: 'thin' },
            //             right: { style: 'thin' },
            //             top: { style: 'thin' },
            //         };
            //     }
            // })
            currentRow++;
            index++;
        }
    }
    const totalRow = worksheet.getRow(currentRow);
    totalRow.getCell(columnMapping.companyName).value = 'TOTAL';
    totalRow.getCell(columnMapping.weightIn).value = totalWeightIn;
    totalRow.getCell(columnMapping.quantity).value = totalTagWeight;
    // totalRow.eachCell({includeEmpty: true}, function (cell, colNumber) {
    //     if (colNumber <= 8) {
    //         cell.font = { name: 'Arial', size: 10, family: 2, bold: true };
    //         cell.alignment = { vertical: 'middle', horizontal: 'center' };
    //         cell.border = {
    //             bottom: { style: 'thin' },
    //             left: { style: 'thin' },
    //             right: { style: 'thin' },
    //             top: { style: 'thin' },
    //         };
    //     }
    // })
    worksheet.getRow(currentRow + 1).getCell(columnMapping.companyName).value = `NET WEIGHT: ${shipment.netWeight}`;
    worksheet.getRow(currentRow + 2).getCell(columnMapping.companyName).value = `SAMPLE: ${shipment.sampleWeight}`;
    worksheet.getRow(currentRow + 3).getCell(columnMapping.companyName).value = `DUST: ${shipment.dustWeight}`;
    worksheet.spliceRows(currentRow + 4, 0, []);
    worksheet.getRow(currentRow + 5).getCell(3).value = `NET WEIGHT: ${shipment.netWeight} KGS`;
    worksheet.getRow(currentRow + 6).getCell(3).value = `SAMPLE: ${shipment.sampleWeight} KGS`;
    worksheet.getRow(currentRow + 7).getCell(3).value = `DUST: ${shipment.dustWeight} KGS`;
    if (shipment.negociantTagListFile?.fileId) {
        imagekit.deleteFile(shipment.negociantTagListFile?.fileId, (err) => {
            if (err) {
                console.log(err);
            } else {
                console.log('file deleted');
            }
        })
        shipment.negociantTagListFile.fileId = "";
        shipment.negociantTagListFile.url = "";
    }
    const buffer = await workbook.xlsx.writeBuffer();
    // await workbook.xlsx.writeFile(`negociant-Tags.xlsx`);
    const data = fs.readFileSync(`negociant-Tags.xlsx`);
    if (buffer) {
        const response = await imagekit.upload({
            file: Buffer.from(buffer),
            fileName: `${shipment.shipmentNumber} NEGOCIANT TAGS LIST.xlsx`,
            folder: `/shipments/${shipment.shipmentNumber}`,
        });
        shipment.negociantTagListFile.url = response.url;
        shipment.negociantTagListFile.fileId = response.fileId;
        // fs.unlink(`${shipment.shipmentNumber} negociant-Tags.xlsx`, (err) => {
        //     if (err) {
        //         console.log(err);
        //     } else {
        //         console.log('file deleted successfully');
        //     }
        // });
    }
    await shipment.save({validateBeforeSave: false});
    res
        .status(200)
        .json (
            {
                status: "success",
                data: {
                    negociantTagListFile: shipment.negociantTagListFile?.url
                }
            }
        )
    ;
})

exports.generateICGLRPackingList = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError('Unable to get shipment', 400));
    const Entry = getModel(shipment.model);
    const entryIds = shipment.entries.map(entry => entry.entryId);
    const entries = await Entry.find({_id: {$in: entryIds}}).populate('mineTags negociantTags');
    const columnMapping = {
        date: 1,
        time: 2,
        internalLotNumber: 3,
        companyName: 4,
        sheetNumber: 6,
        tagNumber: 7,
        tagWeight: 8,
        totalTagWeight: 9,
        weightOut: 10,
        mineralGrade: 11,
        negociantTagNumber: 12,
        mixedWeightOut: {
            cassiterite: 13,
            coltan: 14,
        },
        mixedNegociantTagNumber: {
          cassiterite: 15,
          coltan: 16
        },
        mixedMineralGrade: {
            cassiterite: 17,
            coltan: 18
        },
        mineSiteStatus: 19,
        mineSiteTick: 20,
        grandTotalForExport: 21
    }
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(`${__dirname}/../public/data/templates/ICGLR-packing-list.xlsx`);
    const worksheet = workbook.getWorksheet('PACKING LIST');
    const { nameOfCompany } = await Settings.findOne();
    const applicationDate = '';
    const shipmentAnticipatedDate = '';
    const fileHeading = {
        2: `EXPORTER NAME: ${nameOfCompany.toUpperCase()}`,
        3: `TYPE OF MINERAL TO BE EXPORTED: ${shipment.model?.toUpperCase()}`,
        4: `ITA/iTSCi SHIPMENT NUMBER: ${shipment.iTSCiShipmentNumber}`,
        5: `LOT NUMBER: ${shipment.shipmentNumber}`,
        6: `APPLICATION DATE: ${req.body.applicationDate ? req.body.applicationDate : applicationDate}`,
        7: `ANTICIPATED SHIPMENT DATE: ${req.body.shipmentAnticipatedDate ? req.body.shipmentAnticipatedDate : shipmentAnticipatedDate}`,
    }
    for (const [row, heading] of Object.entries(fileHeading)) {
        worksheet.getRow(Number(row)).getCell(1).value = heading;
    }
    let currentRow = 12;
    for (const entry of entries) {
        if (!entry.mineTags) continue;
        const mineTags = entry.mineTags.filter(tag => tag.status === 'out of store');
        const negociantTags = entry.negociantTags?.filter(tag => tag.status === 'out of store');
        if (mineTags.length === 0) continue;
        const row = worksheet.getRow(currentRow);
        row.getCell(columnMapping.date).value = entry.supplyDate;
        row.getCell(columnMapping.time).value = entry.time;
        row.getCell(columnMapping.companyName).value = entry.companyName;
        const totalTagWeight = mineTags.reduce((acc, tag) => acc + tag.weight, 0);
        // ((weightOut * mineralGrade)1 + (weightOut * mineralGrade)2)  / totalWeightOut =====> averageMineralGrade
        const totalWeightOutMineralGrade = entry.output.reduce((acc, output) => acc + (output.weightOut * output.mineralGrade), 0);
        const exportedWeight = entry.output.reduce((acc, lot) => {
            const lotShipment = lot.shipmentHistory.find(ship => ship.shipmentNumber === shipment.shipmentNumber);
            if (lotShipment) return acc + lotShipment.weight;
        }, 0);
        const totalWeightOut = entry.output.reduce((acc, output) => acc + output.weightOut, 0);
        const averageMineralGrade = totalWeightOutMineralGrade / totalWeightOut;
        mineTags.map((tag, index) => {
            if (index === 0) {
                row.getCell(columnMapping.sheetNumber).value = tag.sheetNumber;
                row.getCell(columnMapping.tagNumber).value = tag.tagNumber;
                row.getCell(columnMapping.tagWeight).value = tag.weight;
            } else {
                const newRow = worksheet.getRow(currentRow + index);
                newRow.getCell(columnMapping.sheetNumber).value = tag.sheetNumber;
                newRow.getCell(columnMapping.tagNumber).value = tag.tagNumber;
                newRow.getCell(columnMapping.tagWeight).value = tag.weight;
            }
        })
        negociantTags?.map((tag, index) => {
            const newRow = worksheet.getRow(currentRow + mineTags.length - negociantTags.length + index);
            if (entry.mineralType === 'mixed') {
                newRow.getCell(columnMapping.mixedWeightOut[shipment.model]).value = tag.weight;
                newRow.getCell(columnMapping.mixedNegociantTagNumber[shipment.model]).value = tag.tagNumber;
                newRow.getCell(columnMapping.mixedMineralGrade[shipment.model]).value = averageMineralGrade;
            } else {
                newRow.getCell(columnMapping.weightOut).value = tag.weight;
                newRow.getCell(columnMapping.mineralGrade).value = averageMineralGrade;
                newRow.getCell(columnMapping.negociantTagNumber).value = tag.tagNumber;
            }
            newRow.getCell(columnMapping.mineSiteStatus).value = "GREEN";
            newRow.getCell(columnMapping.mineSiteTick).value = "YES";
            newRow.getCell(columnMapping.grandTotalForExport).value = exportedWeight;
        })
        const finalRow = worksheet.getRow(currentRow + mineTags.length - 1);
        finalRow.getCell(columnMapping.totalTagWeight).value = totalTagWeight;
        // finalRow.getCell(columnMapping.weightOut).value = exportedWeight;
        // finalRow.getCell(columnMapping.mineralGrade).value = averageMineralGrade;
        // finalRow.getCell(columnMapping.negociantTagNumber).value = entry.negociantTags[0].tagNumber;
        // finalRow.getCell(columnMapping.mineSiteStatus).value = "GREEN";
        // finalRow.getCell(columnMapping.mineSiteTick).value = "YES";
        // finalRow.getCell(columnMapping.grandTotalForExport).value = exportedWeight;
        currentRow += mineTags.length + 1;
    }
    if (shipment.packingListFile?.fileId) {
        imagekit.deleteFile(shipment.packingListFile.fileId, (err) => {
            if (err) {
                console.log(err);
            } else {
                console.log('file deleted');
            }
        })
        shipment.packingListFile.fileId = "";
        shipment.packingListFile.url = "";
    }
    const buffer = await workbook.xlsx.writeBuffer();
    // await workbook.xlsx.writeFile(`packing-list.xlsx`);
    const data = fs.readFileSync(`packing-list.xlsx`);
    if (buffer) {
        const response = await imagekit.upload({
            file: Buffer.from(buffer),
            fileName: `${shipment.shipmentNumber} PACKING LIST.xlsx`,
            folder: `/shipment/${shipment.shipmentNumber}`,
        })
        if (response) {
            shipment.packingListFile.fileId = response.fileId;
            shipment.packingListFile.url = response.url;
        }
        // fs.unlink(`${shipment.shipmentNumber} packing-list.xlsx`, (err) => {
        //     if (err) {
        //         console.log(err);
        //     } else {
        //         console.log('file deleted successfully');
        //     }
        // })
    }
    await shipment.save({ validateBeforeSave: false });
    res
        .status(200)
        .json(
            {
                status: "Success",
                data: {
                    packingListFile: shipment.packingListFile?.url
                }
            }
        )
    ;
})

exports.generateForwardNote = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError("Unable to generate Forward Note, Please try again!", 401));
    const {buffer, response} = await generateForwardNote(shipment);
    if (buffer) {
        await getSFDT(
            Buffer.from(buffer),
            res,
            next,
            {url: response?.url, fileId: response?.fileId, filePath: response?.filePath}
        );
    }
})

exports.shipmentSuppliersGraph = catchAsync(async (req, res, next) => {
    const shipment = await Shipment.findById(req.params.shipmentId);
    if (!shipment) return next(new AppError("Unable to generate Shipment Suppliers Graph, Please try again!", 401));
    const Entry = getModel(shipment.model);
    const formatedData = {};
    if (shipment.entries?.length > 0) {
        for (const item of shipment.entries) {
            const entry = await Entry.findById(item.entryId);
            if (entry) {
                const supplier = await Supplier.findById(entry?.supplierId);
                if (supplier) {
                    if (!formatedData[supplier.companyName.split(' ').join('_')]) {
                        formatedData[supplier.companyName.split(' ').join('_')] = [item.quantity];
                    } else {
                        formatedData[supplier.companyName.split(' ').join('_')].push(item.quantity);
                    }
                }
            }
        }
    }
    const graphData = Object.entries(formatedData).map(([key, value]) => {
        return {
            name: key.split('_').join(' '),
            value: value.reduce((a, b) => a + b, 0)
        }
    })
    graphData.push(
        {
            value: shipment.netWeight,
            itemStyle: {
                color: 'none',
                decal: {
                    symbol: 'none'
                }
            },
            label: {
                show: false
            }
        }
    )
    res
        .status(200)
        .json(
            {
                status: "Success",
                data: {
                    graphData
                }
            }
        )
    ;
})

const multerStorage = multer.diskStorage(
    {
        destination: function (req, file, cb) {
            cb(null, `${__dirname}/../public/data/shipment/${req.params.shipmentId}`);
        },
        filename: function (req, file, cb) {
            // const fileExtension = path.extname(file.originalname);
            // const filePath = `${__dirname}/../public/data/shipment/${req.params.shipmentId}/${file.originalname}`;
            cb(null, file.originalname);
        }
    }
)

const multerFilter = (req, file, cb) => {
    const fileExtension = path.extname(file.originalname);
    const allowExtension = ['.doc', '.docx', '.pdf'];
    if (allowExtension.includes(fileExtension.toLowerCase())) {
        cb(null, true);
    } else {
        cb(new AppError("Not a .doc, .docx, or .pdf selected", 400), false);
    }
}

const upload = multer(
    {
        storage: multerStorage,
        fileFilter: multerFilter
    }
)

exports.uploadCertificates = upload;



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































